#!/usr/bin/env bash

export DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE}" )/.." && pwd )"
BIN_NAME=$( basename "$0" )
COMMAND_NAME="$1"
shift
ARG_NAME=("$@")

set -a

BOLD="\033[1m"
RESET="\033[0m"

WHITE="\033[1;37m"
RED="\033[0;31m";
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"

set +a

info() {
  printf "\r[ ${YELLOW}!!${RESET} ] $1\n";
}

user() {
  printf "\r[ ${BLUE}..${RESET} ] $1\n";
}

success() {
  echo "";
  printf "\r[ ${GREEN}OK${RESET} ] $1\n";
  echo "";
}

fail() {
  echo "";
  printf "\r[${RED}FAIL${RESET}] $1\n";
  echo "";
  exit 1;
}

export -f info
export -f user
export -f success
export -f fail

sub_help() {
  echo -e "Usage: $BIN_NAME <command>"
  echo
  echo -e "Commands:"
  echo -e "   --help          This help message"
  echo
  echo -e "   --install       Apply install scripts"
  echo -e "      ${WHITE} - brew ${RESET}"
  echo -e "      ${WHITE} - atom ${RESET}"
  echo
  echo -e "   --setup         Apply setup scripts"
  echo -e "      ${WHITE} - credentials ${RESET}"
  echo -e "      ${WHITE} - git ${RESET}"
  echo -e "      ${WHITE} - eslint ${RESET}"
  echo -e "      ${WHITE} - mongodb ${RESET}"
  echo -e "      ${WHITE} - pip ${RESET}"
  echo
  echo -e "   --macos         Apply MacOS system preferences"
  echo -e "      ${WHITE} - defaults ${RESET}"
  echo
  echo -e "   --deploy        Deploy dot files"
  echo -e "   --update        Update packages and package managers (brew, npm)"
  echo -e "   --clean         Clean up caches (brew, npm)"
  echo
}

sub_install() {
	info "${YELLOW}This may overwrite existing files in your computer. Are you sure? (y/n)${RESET}";
  read -n 1;
	echo "";
	if [[ $REPLY =~ ^[Yy]$ ]]; then
    for ARG in ${ARG_NAME[@]}; do
      local SCRIPT="${DOTFILES_DIR}/install/${ARG}.sh";
      [ -f "$SCRIPT" ] && echo "Applying '$ARG'" && . "$SCRIPT" || fail "Unable to find script '$ARG'";
    done;
	fi;
}

sub_setup() {
  info "${YELLOW}This may overwrite existing files in your computer. Are you sure? (y/n)${RESET}";
  read -n 1;
	echo "";
	if [[ $REPLY =~ ^[Yy]$ ]]; then
    for ARG in ${ARG_NAME[@]}; do
      local SCRIPT="${DOTFILES_DIR}/setup/${ARG}.sh";
      [ -f "$SCRIPT" ] && echo "Applying '$ARG'" && . "$SCRIPT" || fail "Unable to find script '$ARG'";
    done;
  fi;
}

sub_macos() {
	fail "${YELLOW}Sorry, you cannot run this script automatically. Do it manually.${RESET}";
}

syncDF() {

  if rsync \
  --exclude ".git/" \
  --exclude "bin/" \
  --exclude "credentials/" \
  --exclude "eslint/" \
  --exclude "git/" \
  --exclude "install/" \
  --exclude "macos/" \
  --exclude "setup/" \
  --exclude "theme/" \
  --exclude ".gitignore" \
  --exclude ".DS_Store" \
  --exclude "README.md" \
  -avh --no-perms "${DOTFILES_DIR}/." $HOME; then
    source "${HOME}/.bash_profile";
    success "dot files have been deployed successfully.";
  else
    fail "dot files have not been deployed."
  fi;
}

sub_deploy() {
  local ENV_FILE=".env"

  if [ "$1" == "--force" -o "$1" == "-f" ]; then
  	syncDF;
  else
    if [ ! -f "${DOTFILES_DIR}/${ENV_FILE}" ]; then
      info "${YELLOW}'$ENV_FILE' is missing. Do you want to proceed anyway? (y/n)${RESET}";
      read -n 1;
      echo "";
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        syncDF;
      else
        fail "Aborted: dot files have not been deployed.";
      fi;
    else
      info "${YELLOW}This may overwrite existing files in your home directory. Are you sure? (y/n)${RESET}";
      read -n 1;
      echo "";
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        syncDF;
      fi;
    fi;
  fi;
}

sub_update() {
  brew update
  brew upgrade
  npm install npm -g
  npm update -g
}

sub_clean() {
  brew cleanup
  brew cask cleanup
  npm cache clean
  yarn cache clean
}

case $COMMAND_NAME in
  "" | "-h" | "--help")
    sub_help;
    ;;
  *)
    CMD=${COMMAND_NAME##*-}
    sub_${CMD} $ARG_NAME 2>/dev/null;
    if [ $? = 127 ]; then
      fail "'$CMD' is not a known command or has errors.";
    fi;
    ;;
esac;
